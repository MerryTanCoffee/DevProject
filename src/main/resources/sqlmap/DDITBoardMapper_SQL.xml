<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
	[참고 사이트] 마이바티스
	- https://mybatis.org/mybatis-3/ko/getting-started.html
	- https://mybatis.org/mybatis-3/ko/configuration.html#handling-enums
	
	마이바티스란?
	- 마이바티스는 개발자가 지정한 SQL, 저장 프로시저 그리고 몇가지 고급 매핑을 지원하는 퍼시스턴스 프레임워크이빈다.
	마이바티스는 JDBC로 처리하는 상당 부분의 코드와 파라미터 설정 및 결과 매핑을 대신 해줍니다.
	마이바티스는 데이터베이스 레코드에 원시타입과  Map 인터페이스 그리고 자바 POJO를 설정해서 매핑하기 위해
	XML과 어노테이션을 사용할 수 있습니다.
	
		*** POJO란?
		- POJO(Plain Old Java Object)란, 순수한 자바 객체를 말한다.
		그리고 객체지향적인 원리에 충실하면서 환경과 기술에 종속되지 않고 필요에 따라 재활용될 수 있는 방식으로 설계된 오브텍트
		객체지향원리를 기반으로 설계된 오브젝트(getter/setter를 이용한 vo들)
		
	namespace 항목은 쿼리가 여러 개일 때 이름 공간(namespace)을 분리하는 역할을 한다.
	쿼리 XML 파일은 보통 여러 개가 생성되기 때문에 이를 구별하는 용도로 사용한다. 	
			
 -->
<mapper namespace = "kr.or.ddit.mapper.test.DDITBoardMapper">

	<resultMap type="dditBoard" id="boardMap">
		<id property = "boNo" column="BO_NO"/> <!-- member 테이블의 기본키가 userNo임을 명시 -->
		<result property="boTitle" column="BO_TITLE"/>
		<result property="boContent" column="BO_CONTENT"/>
		<result property="boWriter" column="BO_WRITER"/>
		<result property="boDate" column="BO_DATE"/>
		<result property="boHit" column="BO_HIT"/>
		<collection property="tagList" resultMap="tagMap"/>
	</resultMap>
	
	<resultMap type="dditTag" id="tagMap">
		<result property="boNo" column="BO_NO"/>
		<result property="tagName" column="TAG"/>
	</resultMap>

		<!-- resultType = "DDITBoardVO"로는  아래 조인 쿼리를 다 받을 수 없어서 Map으로 받음-->
	
	<select id="read" parameterType="int" resultMap="boardMap">
		select 
 	 	    m.BO_NO, BO_TITLE, BO_CONTENT, BO_WRITER, BO_DATE, BO_HIT,
   	 		ma.BO_NO, TAG
		from DDITBOARD m left outer join DDITTAG ma on (m.BO_NO = ma.BO_NO)
		where m.BO_NO = #{boNo}
	</select>

	<insert id = "create" parameterType="dditBoard" useGeneratedKeys="true">
	<selectKey order="BEFORE" keyProperty="boNo" resultType="int">
		select seq_dditboard.nextval from dual
	</selectKey> 
		INSERT INTO DDITBOARD(
			BO_NO, BO_TITLE, BO_CONTENT, BO_WRITER, BO_DATE, BO_HIT		
		) values (
			#{boNo}, #{boTitle}, #{boContent}, #{boWriter}, sysdate, 0
		)	
	</insert>	
	
	<insert id="createTag" parameterType="dditTag">
		insert into DDITTAG (
			BO_NO, TAG
		) values (
			#{boNo}, #{tagName}
		)
	
	</insert>
	
	
	<select id = "list" resultType="dditBoard">
		select
			BO_NO, BO_TITLE, BO_CONTENT, BO_WRITER, BO_DATE,BO_HIT
		from DDITBOARD
		where 1=1
		order by BO_NO desc	
	</select>
	
	<update id = "incrementHit" parameterType="int">
	update DDITBOARD
		set 
			BO_HIT = BO_HIT +1
	where BO_NO = #{boNo}		
	</update>
	
		
	<insert id = "update" parameterType="dditBoard">
		update DDITBOARD
			set 
			BO_TITLE = #{boTitle}, 
			BO_CONTENT = #{boContent}, 
			BO_WRITER = #{boWriter}, 
			BO_DATE = sysdate		
		where BO_NO = #{boNo}	
	</insert>
		
	<delete id = "remove" parameterType="int">
		delete from DDITBOARD where bo_no = #{boNo}	
	</delete>
	
	<delete id = "removeTag" parameterType="int">
		delete from DDITTAG where bo_no = #{boNo}	
	</delete>
	
	<select id="search" parameterType="hashMap" resultType="dditBoard">
		select 
			BO_NO, BO_TITLE, BO_CONTENT, BO_WRITER, BO_DATE, BO_HIT
		from dditBoard
		where 1=1
		
		<if test="searchType !=null and searchType !='boTitle'">
			and BO_TITLE like '%'||#{searchWord}||'%'
		<if test="searchType !=null and searchType !='boWriter'">
			and BO_WRITER like '%'||#{searchWord}||'%'
		</if>
		</if>
		<if test="searchType !=null and searchType !='both'">
			and BO_TITLE like '%'||#{searchWord}||'%'
			or BO_WRITER like '%'||#{searchWord}||'%'
		</if>
		order by bo_no desc
	</select>	
	
</mapper>
