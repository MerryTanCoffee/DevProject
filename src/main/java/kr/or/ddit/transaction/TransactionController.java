package kr.or.ddit.transaction;

public class TransactionController {

	
	/*
	 * 15장 트랜잭션
	 * - rollback 처리를 해주는 기능
	 * 
	 * 1. 트랜잭션 설명
	 * - 한번에 이루어지는 작업의 단위를 의미한다.
	 * 
	 * 		트랜잭션 성격(ACID 원칙)
	 * 		- 원자성(Automicity)
	 * 			> 하나의 트랜잭션은 모두 하나의 단위로 처리되어야한다.
	 * 		
	 * 		- 일관성(Consistency)
	 * 			> 트랜잭션이 성공했다면 모든 데이터는 일관성을 유지해야한다.
	 * 
	 * 		- 격리성(Isolation)
	 * 			> 트랜잭션으로 처리되는 동안에는 외부에서의 간섭이 없어야한다.
	 * 
	 * 		- 영속성(Durability)
	 * 			> 트랜잭션이 성공적으로 처리되면 그 결과는 영속적으로 보관되어야한다,
	 * 
	 * 2. 트랜잭션 설정
	 * 		
	 * 		2-1) 스프링 설정
	 * 			- root-context.xml 설정
	 * 				> 네임스페이스, 스키마 설정
	 * 			- transactionManager 빈 등록
	 * 			- 어노테이션 기반의 트랜잭션 제어 활성화
	 * 
	 * 3. 트랜잭션 적용
	 * 
	 * [테스트는 AOP가 적용된 CRUDController와 연계된 ServiceImpl에서 진행했습니다]
	 * 
	 * 예) 회원은 반드시 하나의 권한을 가진다는 비즈니스 규칙이 있다.
	 * 회;원과 회원권한테이블이 각각 개별로 존재하지만 회원 정보를 저장할 때 반드시 회원권한 정보를 동시에 저장해야한다.
	 * 클래스나 메서드에 대해 @Transactional 어노테이션을 부여하여 트랜잭션을 적용할 수 있다.
	 * 
	 * 서비스 구현 객체에 트랜잭션 적용
	 * 	- 회원정보를 저장하다가 실패하거나 회원 권한 정보를 저장하다가 실패하면 회원테이블고 회원 권한 테이블 모두 저장되지 않는다.
	 *	 회원정보와 회원 권한 정보 모두 저장에 성공해야 비로소 회원 테이블과 회원 권한 테이블에 저장이 이루어진다.
	 *	 삭제 수정도 마찬가지로 이뤄진다.
	 * 
	 * 어노테이션 @Transactional을 적용하고 중간에 에러를 발생시킨 후 롤백된 상태를 확인하려고 했으나 롤백이 되지 않고 
	 * 데이터베이스에 등록된다 그 이유는 스프링 프레임 워크에서 @Transactional 어노테이션은 기본적으로 Checked Exception에
	 * 대해서는 롤백처리를 하지 않도록 설계되어 있다.
	 * 
	 * 여기서 트랜잭션으로 국한된 롤백 정책이 아니라 스프링 프레임워크에서의 기본 정책에 대한 내용일 뿐이다.
	 * 실제로, '트랜잭션 롤백처리', 'checked Exception vs unchecked Exception' 등 검색해보면 잘돗된 정보들로
	 * 복사/붙여넣기 되어 있는 내용이 수두룩하여 많은 에러정보를 공유하고 있다.
	 * 
	 * Exception(예외)와 Error(에러)
	 * - Exception : 개발 알고리즘에서 발생하는 오류로 개발자가 작성한 코드에서 발생하므로 예외를 상황에 맞춰 처리할 수 있다.
	 * - Error : 시스템에서 발생하는 심각한 수준의 에러로 개발자가 미리 예측하여 대응할 수 없기 때문에 예외처리에 대한 부분은 신경쓰지 않아도 됨.
	 * 
	 * CheckedException UncheCkedException
	 * - RuntimeException의 상속 여부에 따라서 Checked Exception과 Unchecked Exception으로 나누어 진다.
	 * 
	 * 				|	checked Exception			|	Unchecked Exception
	 * ==============================================================================================		
	 * 예외 처리 여부	|	반드시 예외처리 코드가 있어야한다.	|	강제로 예외처리는 아니다.		
	 * 예외 확정 시점	|	컴파일 단계에서부터 컴파일 되지 않는다.	|	런타임 중 예외가 확인된다.
	 * 클래스			|	IOException,SQLException	|	NullPointException, IndexOutOfBoundException
	 * 
	 * 
	 * 
	 */
}
